{"version":3,"sources":["promise.js"],"names":["delay","ms","delayedPromise","Promise","resolve","reject","setTimeout","timeLogger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","promise","logger","table"],"mappings":";AAwDA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAxDA,IAAMA,EAAQ,SAAAC,GAMHC,OALgB,IAAIC,QAAQ,SAACC,EAASC,GACzCC,WAAW,WACPF,EAAQH,IACTA,MAKLM,EAAa,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAEvBR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ,GAEjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAUnBC,EAAkB,SAACC,EAAUC,GACzBC,IAAAA,EAAeF,EAASG,IAAI,SAAAC,GAC9BA,OAAAA,EAAKP,OAASI,EAAgBG,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCN,QAASM,EAAKN,SAAWM,IAE3DC,EAAU,IAAIlB,QAAQ,SAACC,EAASC,GAClCD,EAAQc,KAMLG,OAHPZ,QAAQC,IAAIQ,GACZT,QAAQC,IAAI,YAAaW,GAElBA,GAILC,EAAS,SAAAJ,GAAgBT,OAAAA,QAAQc,MAAML,IAW7CH,EAAgBH,EAAO,SAASD,KAAKW,GACrCP,EAAgBH,EAAO,OAAOD,KAAKW","file":"promise.0f68cdd8.js","sourceRoot":"..\\src","sourcesContent":["const delay = ms => {\r\n    const delayedPromise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n    return delayedPromise;\r\n};\r\n\r\nconst timeLogger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(timeLogger); // Resolved after 2000ms\r\ndelay(1000).then(timeLogger); // Resolved after 1000ms\r\ndelay(1500).then(timeLogger); // Resolved after 1500ms\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//         user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n\r\n//     callback(updatedUsers);\r\n// };\r\nconst toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    const promise = new Promise((resolve, reject) => {\r\n        resolve(updatedUsers)\r\n    })\r\n\r\n    console.log(updatedUsers);\r\n    console.log(\"~ promise\", promise)\r\n\r\n    return promise\r\n};\r\n\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n"]}